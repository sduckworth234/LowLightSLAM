name: LowLightSLAM CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-ubuntu-20:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        ros_distro: [noetic]
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Setup ROS environment
      uses: ros-tooling/setup-ros@v0.6
      with:
        required-ros-distributions: ${{ matrix.ros_distro }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ros-${{ matrix.ros_distro }}-cv-bridge \
          ros-${{ matrix.ros_distro }}-tf \
          ros-${{ matrix.ros_distro }}-message-filters \
          ros-${{ matrix.ros_distro }}-image-transport \
          ros-${{ matrix.ros_distro }}-sensor-msgs \
          ros-${{ matrix.ros_distro }}-geometry-msgs \
          ros-${{ matrix.ros_distro }}-nav-msgs \
          libopencv-dev \
          python3-opencv \
          libeigen3-dev \
          libssl-dev \
          libusb-1.0-0-dev \
          pkg-config \
          libgtk-3-dev \
          libglfw3-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev
    
    - name: Install Pangolin
      run: |
        cd /tmp
        git clone https://github.com/stevenlovegrove/Pangolin.git
        cd Pangolin
        mkdir build && cd build
        cmake ..
        make -j2
        sudo make install
        sudo ldconfig
    
    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip3 install numpy opencv-python Pillow
    
    - name: Build ORB-SLAM3
      run: |
        cd ORB_SLAM3
        chmod +x build.sh
        ./build.sh
    
    - name: Build ROS workspace
      run: |
        source /opt/ros/${{ matrix.ros_distro }}/setup.bash
        catkin_make
    
    - name: Run verification script
      run: |
        chmod +x verify.sh
        ./verify.sh
    
    - name: Test ROS packages
      run: |
        source /opt/ros/${{ matrix.ros_distro }}/setup.bash
        source devel/setup.bash
        catkin_make run_tests

  test-ubuntu-18:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        ros_distro: [melodic]
    
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Setup ROS environment
      uses: ros-tooling/setup-ros@v0.6
      with:
        required-ros-distributions: ${{ matrix.ros_distro }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ros-${{ matrix.ros_distro }}-cv-bridge \
          ros-${{ matrix.ros_distro }}-tf \
          ros-${{ matrix.ros_distro }}-message-filters \
          ros-${{ matrix.ros_distro }}-image-transport \
          libopencv-dev \
          python3-opencv \
          libeigen3-dev \
          python3-pip
    
    - name: Install Pangolin
      run: |
        cd /tmp
        git clone https://github.com/stevenlovegrove/Pangolin.git
        cd Pangolin
        mkdir build && cd build
        cmake ..
        make -j2
        sudo make install
        sudo ldconfig
    
    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install torch==1.9.0 torchvision==0.10.0 --index-url https://download.pytorch.org/whl/cpu
        pip3 install numpy opencv-python Pillow
    
    - name: Build ORB-SLAM3
      run: |
        cd ORB_SLAM3
        chmod +x build.sh
        ./build.sh
    
    - name: Build ROS workspace
      run: |
        source /opt/ros/${{ matrix.ros_distro }}/setup.bash
        catkin_make
    
    - name: Run verification script
      run: |
        chmod +x verify.sh
        ./verify.sh

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Check documentation
      run: |
        # Check that all required documentation files exist
        test -f README.md
        test -f DEVELOPER_GUIDE.md
        test -f CHANGELOG.md
        test -f LICENSE
        
        # Check that scripts are executable
        test -x install.sh
        test -x setup.sh
        test -x verify.sh
        
        echo "All documentation files present and scripts are executable"

  style-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install style checkers
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck python3-pip
        pip3 install flake8
    
    - name: Check C++ style
      run: |
        find src -name "*.cpp" -o -name "*.h" | xargs cppcheck --error-exitcode=1 --enable=warning
    
    - name: Check Python style
      run: |
        find src -name "*.py" | xargs flake8 --max-line-length=120 --ignore=E501
